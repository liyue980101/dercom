<?php
// +----------------------------------------------------------------------
// | Created by PHPstorm: [ JRK丶Admin ]
// +----------------------------------------------------------------------
// | Copyright (c) 2019~2022 [LuckyHHY] All rights reserved.
// +----------------------------------------------------------------------
// | SiteUrl: http://www.luckyhhy.cn
// +----------------------------------------------------------------------
// | Author: DER <der1998@gmail.com>
// +----------------------------------------------------------------------
// | Date: 2020/6/29 0029
// +----------------------------------------------------------------------
// | Description:  
// +----------------------------------------------------------------------

namespace app\admin\controller;


use app\admin\model\AdminUser;
use app\admin\model\AuthGroups;
use app\admin\model\GroupAccess;
use app\admin\service\ExcelService;
use app\admin\validate\CheckGroups;
use app\common\controller\AdminBaseController;
use app\admin\model\AuthRule;
use Jrk\Tool;
use Jrk\Tree;
use think\Exception;
use think\facade\Db;
use think\Request;
use app\common\service\FormBuilder as Form;
use think\facade\Route;

class AuthGroup extends AdminBaseController
{
    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub

        $this->model = new AuthGroups();
    }



    /**
     * @return string|\think\response\Json
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     * @author: DER <der1998@gmail.com>
     * @describe:添加编辑
     */
    public function addGroups()
    {
        $k=AuthGroups::where("status",1)->select()->toArray();
        $tree = Tree::toFormatTree($k);
        $id = $this->request->param("id/d", 0);//父id
        $info = AuthGroups::find($id);
        $this->assign(compact("info", "id","tree"));
        return $this->fetch("auth_group");
    }


    /**
     * @return \think\response\Json
     * @author: DER <der1998@gmail.com>
     * @describe:tree
     */
    public function auth_tree(){
       $data= $this->model->field("id,title,pid")->select()->toArray();
       $arr=["id"=>0,'name'=>'全部','pId'=>0];
       if (!empty($data)){
           foreach ($data as $k=>$v){
               $data[$k]['name']=$v['title'];
               $data[$k]['pId']=$v['pid'];
               unset($data[$k]['pid']);
               unset($data[$k]['title']);
           }
       }
       $leg=count($data);
       if (!empty($data)){
           $data[$leg]=$arr;
       }
       return json($data);
    }

    /**
     * @return string|\think\response\Json
     * @throws Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * @throws \think\exception\PDOException
     * @author: DER <der1998@gmail.com>
     * @describe:角色授权
     */
    public function userGroup()
    {
        if (IS_AJAX) {
            $data = $this->request->post();

            try {
                if (!isset($data['uid'])) {
                    $group_access = GroupAccess::where("group_id", "=", $data['group_id'])->delete();
                    if ($group_access) {
                        return parent::JsonReturn("取消授权成功");
                    } else {
                        return parent::JsonReturn("取消授权失败", 0);
                    }
                }
                //获取当前 权限组已经授权的人员ID
                $group_access = GroupAccess::field("uid")->where("group_id", "=", $data['group_id'])->column("uid");
                // dd($group_access);
                if (empty($group_access)) {
                    return $this->addG($data["uid"], $data['group_id']);
                } else {
                    //提交的 授权人员ID
                    $a_uid = [];
                    foreach ($data["uid"] as $k => $v) {
                        $a_uid[] = intval($v);
                    }
                    // 合并两个UID
                    $all = array_merge($group_access, $a_uid);
                    //去除重复的UID
                    $final = array_unique($all);
                    $arr_insert = [];
                    foreach ($final as $k => $v) {
                        //当前传的ID不在表中
                        if (!in_array($v, $group_access)) {
                            $arr_insert[] = ['uid' => $v, 'group_id' => $data['group_id'], 'create_time' => time()];
                        }
                    }
                    // dd($arr_insert);
                    if (empty($arr_insert)) {
                        return parent::JsonReturn("数据暂未修改", 0);
                    } else {
                        $res = Db::name("auth_group_access")->insertAll($arr_insert);
                        if ($res) {
                            return parent::JsonReturn("授权成功");
                        } else {
                            return parent::JsonReturn("授权失败", 0);
                        }
                    }
                }
            } catch (\Exception $exception) {
                return parent::JsonReturn($exception->getMessage(), 0);
            }
        }

        $id = $this->request->param("id/d", 0);//父id
        //
        $group_access = GroupAccess::where("group_id", "=", $id)->select();

        $user = AdminUser::where("status", "=", 1)->where("id", "<>", 1)->select();

        //查询当前已经授权的人员

        if (!empty($user) && !empty($group_access)) {
            foreach ($user as $k => $v) {
                foreach ($group_access as $t => $g) {
                    if ($g['uid'] == $v['id']) {
                        $user[$k]['checked'] = true;
                    }
                }
            }
        }

        $this->assign(compact("id", "user", "group_access"));
        return $this->fetch();
    }


    /**
     * @param AuthGroups $authGroups
     * @return \think\response\Json
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     * @author: DER <der1998@gmail.com>
     * @describe:
     */
    public function export(AuthGroups $authGroups){
        $param=$this->request->post();
        $where=[];
        $order = 'id desc';
        if (isset($param['title']) && $param['title'] != '') {
            $where[] = ['title', 'like', "%" . $param['title'] . "%"];
        }

        if (!empty($param['isAsc']) && !empty($param['orderByColumn'])){
            $order="{$param['orderByColumn']} {$param['isAsc']}";
        }

        if (!empty($param['status'])){
            $status=(int)$param['status']-1;
            $where[] = ['status', '=', $status];
        }

        if (!empty($param['beginTime']) && !empty($param['endTime'])){
            $where[] = ['create_time', 'between', [strtotime($param['beginTime']),strtotime($param['endTime'])]];
        }
        $result=$authGroups->where($where)->order($order)->select()->toArray();
        if (empty($result)){
            return parent::JsonReturn("根据条件未查询到数据",0);
        }

        $arr=[];
        foreach ($result as $k=>$v){
            $arr[]=[
                $v['id'],$v['title'],$v['rules'],$v['status'],$v['create_time']
            ];
        }
       $filename= ExcelService::setExcelHeader(['ID','名称','规则','状态','时间'])
         ->setExcelTile('权限分组数据', '权限分组数据',date('Y-m-d H:i:s',time()))
         ->setExcelContent($arr)
         ->ExcelReturn();
        return parent::JsonReturn($filename);
    }



    /**
     * @param $arrs
     * @param $group_id
     * @return \think\response\Json
     * @author: DER <der1998@gmail.com>
     * @describe:
     */
    protected function addG($arrs, $group_id)
    {
        $arr = [];
        foreach ($arrs as $k => $v) {
            $arr[] = ['uid' => $v, 'group_id' => $group_id, 'create_time' => time()];
        }
        $res = Db::name("auth_group_access")->insertAll($arr);
        if ($res) {
            return parent::JsonReturn("授权成功");
        } else {
            return parent::JsonReturn("授权失败", 0);
        }
    }


    /**
     * @return \think\response\Json
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     * @author: DER <der1998@gmail.com>
     * @describe:授权菜单
     */
    public function getRoles()
    {
        if (IS_AJAX) {
            $id = $this->request->param("id/d", 0);
            //新增 权限
            if ($id == 0) {
                $res = AuthRule::menuALL(["status" => 1, 'auth_open' => 1]);
                $list = $this->eachData($res);
            } else {
                $rules = AuthGroups::where("id", "=", $id)->value("rules");
                if (empty($rules)) {
                    $res = AuthRule::menuALL(["status" => 1, 'auth_open' => 1]);
                    $list = $this->eachData($res);
                } else {
                    $all = AuthRule::menuALL(["status" => 1, 'auth_open' => 1]);
                    $ids = @explode(",", $rules);
                    if (!empty($all)) {
                        //先数组添加 查看
                        $lists = $this->eachData($all);
                        foreach ($lists as $k => $v) {
                            if (in_array($v['id_'], $ids)) { //
                                $lists[$k]['checked'] = true; //追加默认选中
                                //$da[$k]['disable']=true; //不可选择
                            }
                        }
                        $list = $lists;
                    } else {
                        $list = $all;
                    }
                }
            }

            return parent::JsonReturn("ok", 1, '', Tree::DeepTree($list, "list"));
        }
    }


    /**
     * @param $id
     * @return bool
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     * @author: DER <der1998@gmail.com>
     * @describe:
     */
    protected function isChild($id)
    {
        $res = Db::name("auth_rule")->where("pid", $id)->where("type", 1)->find();
        if ($res) {
            return false;
        }
        return true;
    }


    /**
     * @param $list
     * @return array
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     * @author: DER <der1998@gmail.com>
     * @describe: 循环数组追加查看
     */
    protected function eachData($list)
    {
        if (empty($list)) return [];
        foreach ($list as $k => $v) {
            $ck = $this->isChild($v['id']);
            if ($v['type'] == 1 && $ck) {
                array_push($list, ["id" => (int)Tool::uniqidNumberCode(4), "id_" => $v['id'], "pid" => $v['id'], "name" => $v['name'], 'type' => 2, 'title' => '查看', 'auth_open' => 1, 'status' => 1]);
            }
            $list[$k]['id_'] = $v['id'];
        }
        return $list;
    }


}